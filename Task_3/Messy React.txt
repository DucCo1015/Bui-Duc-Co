
============================================= INEFFICIENCIES =================================================

Improved getPriority function: Using an object to map a priority value is more optimal than using a switch-case.
Filter condition in sortedBalances: There is a logic error when checking the lhsPriority variable that is not defined.
Filtering and sorting in useMemo: Combining filtering and sorting in the same temporary array will make the code more compact.
Improved formatting of Balances: There is no need to iterate over sortedBalances when there is already a formatted variable in rows.


=============================================== IMPROVE ======================================================

The getPriority function is optimized by using an object to map priority values.
The use of .filter() and .sort() in useMemo has been adjusted to filter balances with a priority greater than -99 and balances greater than 0.
Create rows directly from sortedBalances with the balance format already defined in each element of the rows array.


=============================================== NOTES ========================================================

Due to the short time and I don't have too much knowledge about TypeScript, 
there are some pieces of code that I don't understand well to make the best use of this code. Thank you


====================================== The FOLLOWING CODE SNIPPET IMPROVE ====================================


interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string;
}
interface FormattedWalletBalance extends WalletBalance {
  formatted: string;
}

interface Props extends BoxProps {}

const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

  const blockchainPriority: { [key: string]: number } = {
    Osmosis: 100,
    Ethereum: 50,
    Arbitrum: 30,
    Zilliqa: 20,
    Neo: 20,
  };

  const getPriority = (blockchain: string): number => {
    return blockchainPriority[blockchain] ?? -99;
  };

  const sortedBalances = useMemo(() => {
    return balances
      .filter((balance: WalletBalance) => {
        const balancePriority = getPriority(balance.blockchain);
        return balancePriority > -99 && balance.amount > 0;
      })
      .sort((lhs: WalletBalance, rhs: WalletBalance) => {
        const leftPriority = getPriority(lhs.blockchain);
        const rightPriority = getPriority(rhs.blockchain);
        return rightPriority - leftPriority;
      });
  }, [balances, prices]);

  const rows = sortedBalances.map((balance: WalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount;
    const formattedAmount = balance.amount.toFixed();
    return (
      <WalletRow
        className={classes.row}
        key={index}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={formattedAmount}
      />
    );
  });

  return (
    <div {...rest}>
      {rows}
    </div>
  );
};